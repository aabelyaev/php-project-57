<?php

namespace Tests\Feature;

use App\Models\TaskStatus;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class LabelTest extends TestCase
{
    use RefreshDatabase;

    private User $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
    }

    public function test_labels_is_displayed(): void
    {
        $response = $this->get('/labels');

        $response->assertOk();
    }

    public function test_label_create_form_is_displayed(): void
    {
        $response = $this
            ->actingAs($this->user)
            ->get('/labels/create');

        $response->assertOk();
    }

    public function test_user_can_create_label(): void
    {
        $this->assertDatabaseMissing('labels', [
            'name' => 'Testing',
        ]);

        $response = $this
            ->actingAs($this->user)
            ->post('/labels', [
                'name' => 'Testing',
                'description' => 'Some description',
            ]);

        $response->assertRedirect('/labels');

        $this->assertDatabaseHas('labels', [
            'name' => 'Testing',
        ]);
    }

    public function test_user_cannot_duplicate_label(): void
    {
        $this
            ->actingAs($this->user)
            ->post('/labels', [
                'name' => 'Testing',
                'description' => 'Some description',
            ]);

        $response = $this
            ->actingAs($this->user)
            ->post('/labels', [
                'name' => 'Testing',
                'description' => 'Some description',
            ]);

        $response->assertRedirectBack();
    }

    public function test_label_edit_form_is_displayed(): void
    {
        $this
            ->actingAs($this->user)
            ->post('/labels', [
                'name' => 'Testing',
                'description' => 'Some description',
            ]);

        $response = $this
            ->actingAs($this->user)
            ->get('/labels/1/edit');

        $response->assertOk();
    }

    public function test_user_can_update_label(): void
    {
        $this
            ->actingAs($this->user)
            ->post('/labels', [
                'name' => 'Testing',
                'description' => 'Some description',
            ]);

        $this->assertDatabaseHas('labels', [
            'name' => 'Testing',
        ]);

        $response = $this
            ->actingAs($this->user)
            ->patch('/labels/1', [
                'name' => 'Review',
                'description' => 'Some description',
            ]);

        $response->assertRedirect('/labels');

        $this->assertDatabaseMissing('labels', [
            'name' => 'Testing',
        ]);

        $this->assertDatabaseHas('labels', [
            'name' => 'Review',
        ]);
    }

    public function test_user_can_delete_label(): void
    {
        $this
            ->actingAs($this->user)
            ->post('/labels', [
                'name' => 'Testing',
                'description' => 'Some description',
            ]);

        $this->assertDatabaseHas('labels', [
            'name' => 'Testing',
        ]);

        $response = $this
            ->actingAs($this->user)
            ->delete('/labels/1');

        $response->assertRedirect('/labels');

        $this->assertDatabaseMissing('labels', [
            'name' => 'Testing',
        ]);
    }

    public function test_user_cannot_delete_label_if_it_is_associated_with_task(): void
    {
        $taskStatus = TaskStatus::factory()->create();

        $this
            ->actingAs($this->user)
            ->post('/labels', [
                'name' => 'Testing',
                'description' => 'Some description',
            ]);

        $this
            ->actingAs($this->user)
            ->post('/tasks', [
                'name' => 'Run tests',
                'description' => 'Some description',
                'status_id' => $taskStatus->id,
                'created_by_id' => $this->user->id,
                'assigned_to_id' => $this->user->id,
                'labels' => [1],
            ]);

        $this->assertDatabaseHas('labels', [
            'name' => 'Testing',
        ]);

        $response = $this
            ->actingAs($this->user)
            ->delete('/labels/1');

        $response->assertRedirect('/labels');

        $this->assertDatabaseHas('labels', [
            'name' => 'Testing',
        ]);
    }
}
